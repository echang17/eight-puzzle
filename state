# state.py (Final Project)
#
# A State class for the Eight Puzzle

from board import *
from searcher import * # added for part 7

# a 2-D list that corresponds to the tiles in the goal state
GOAL_TILES = [[0, 1, 2],
              [3, 4, 5],
              [6, 7, 8]]

# the list of possible moves, each of which corresponds to
# moving the blank cell in the specified direction
MOVES = ['up', 'down', 'left', 'right']

class State:
    """ A class for objects that represent a state in the state-space 
        search tree of an Eight Puzzle.
    """
    ### Add your method definitions here. ###
# Part 1: __init__
    def __init__(self,board,predecessor,move):
        '''initializes: attribute board that stores a reference to the board
object associated with this state, attribute predecessor that stores a reference
to the state object that comes before this state in the current sequence of
moves, attribute move that stores a string representing the move that was
needed to transition from the prefecessor state to this state, and attribute
num_moves that stores an integer representing the number of moves that were
neede to get from the initial state to this state. All but num_moves are
specified by the parameters.'''
        self.board = board
        self.predecessor = predecessor
        self.move = move
        if predecessor == None:
            self.num_moves = 0
        else:
            self.num_moves = predecessor.num_moves + 1

    def __repr__(self):
        """ returns a string representation of the State object
            referred to by self.
        """
        # You should *NOT* change this method.
        s = self.board.digit_string() + '-'
        s += self.move + '-'
        s += str(self.num_moves)
        return s
    
    def creates_cycle(self):
        """ returns True if this State object (the one referred to
            by self) would create a cycle in the current sequence of moves,
            and False otherwise.
        """
        # You should *NOT* change this method.
        state = self.predecessor
        while state != None:
            if state.board == self.board:
               return True
            state = state.predecessor
        return False

    def __gt__(self, other):
        """ implements a > operator for State objects
            that always returns True. This will be needed to break
            ties when we use max() on a list of [priority, state] pairs.
            If we don't have a > operator for State objects,
            max() will fail with an error when it tries to compare
            two [priority, state] pairs with the same priority.
        """
        # You should *NOT* change this method.
        return True

# Part 2: is_goal
    def is_goal(self):
        '''returns True if the called state object is a goal state, False otherwise'''
        return self.board.tiles == GOAL_TILES

# Part 3: generate_successors
    def generate_successors(self):
        '''creates and returns list of state objects for all successor states of
the called State object.'''
        successors = []
        for i in range(len(MOVES)):
            b = self.board.copy()
            if b.move_blank(MOVES[i]) == True:
                new = State(b,self,MOVES[i])
                successors = successors + [new]
        return successors

# Part 7 of Project pt 3: print_moves_to
    def print_moves_to(self):
        '''prints sequence of moves that lead from the initial state to the
called State object'''
        if self.num_moves == 0: #if self is the initial state
            print('initial state:')
            print(self.board)
        else:
            self.predecessor.print_moves_to()
            print('move the blank ' + str(self.move) + ':')
            print(self.board)
            
